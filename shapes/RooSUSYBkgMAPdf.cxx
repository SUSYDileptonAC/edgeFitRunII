 /***************************************************************************** 
  * Project: RooFit                                                           * 
  *                                                                           * 
  * This code was autogenerated by RooClassFactory                            * 
  *****************************************************************************/ 

 // Your description goes here... 

 #include "Riostream.h" 

 #include "RooSUSYBkgMAPdf.h" 
 #include "RooAbsReal.h" 
 #include "RooAbsCategory.h"
 #include "TMath.h"

 ClassImp(RooSUSYBkgMAPdf) 

 RooSUSYBkgMAPdf::RooSUSYBkgMAPdf(const char *name, const char *title, 
                        RooAbsReal& _inv,
                        RooAbsReal& _b1,
                        RooAbsReal& _b2,
                        RooAbsReal& _b3,
                        RooAbsReal& _b4,
                        RooAbsReal& _m1,
                        RooAbsReal& _m2) :
   RooAbsPdf(name,title), 
   inv("inv","inv",this,_inv),
   b1("b1","b1",this,_b1),
   b2("b2","b2",this,_b2),
   b3("b3","b3",this,_b3),
   b4("b4","b4",this,_b4),
   m1("m1","m1",this,_m1),
   m2("m2","m2",this,_m2)
 { 
 } 


 RooSUSYBkgMAPdf::RooSUSYBkgMAPdf(const RooSUSYBkgMAPdf& other, const char* name) :  
   RooAbsPdf(other,name), 
   inv("inv",this,other.inv),
   b1("b1",this,other.b1),
   b2("b2",this,other.b2),
   b3("b3",this,other.b3),
   b4("b4",this,other.b4),
   m1("m1",this,other.m1),
   m2("m2",this,other.m2)
 { 
 } 



 Double_t RooSUSYBkgMAPdf::evaluate() const 
 { 
	 
	
	Float_t f2m1 = b1 + b2*m1 + b3*TMath::Power(m1,2) + b4*TMath::Power(m1,3);
	Float_t difff2m1 = b2 + 2*b3*m1 + 3*b4*TMath::Power(m1,2); 
	Float_t f2m2 = b1 + b2*m2 + b3*TMath::Power(m2,2) + b4*TMath::Power(m2,3);
	Float_t difff2m2 = b2 + 2*b3*m2 + 3*b4*TMath::Power(m2,2);
	
	 
	 
	if (inv < m1){ 
		return (f2m1/(TMath::Power(m1,m1*difff2m1/f2m1)))*TMath::Power(inv,m1*difff2m1/f2m1);
	}
	else if (m1 <= inv && inv < m2){
		return (b1 + b2*inv + b3*TMath::Power(inv,2) + b4*TMath::Power(inv,3));
	}
	else{
		return (f2m2/(TMath::Exp((difff2m2/f2m2)*m2)))*TMath::Exp((difff2m2/f2m2)*(inv));
	}	
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 


 } 



