/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooZExtPdf.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include "TMath.h"

ClassImp(RooZExtPdf) 

RooZExtPdf::RooZExtPdf(const char *name, const char *title, 
                       RooAbsReal& _inv,
                       RooAbsReal& _cContinuum,
                       RooAbsReal& _prediction ) :
  RooAbsPdf(name,title),
  inv("inv","inv",this,_inv),
  cContinuum("cContinuum","cContinuum",this,_cContinuum),
  prediction("prediction","prediction",this,_prediction)
{ 
} 


RooZExtPdf::RooZExtPdf(const RooZExtPdf& other, const char* name) :  
  RooAbsPdf(other,name), 
  inv("inv",this,other.inv),
  cContinuum("cContinuum",this,other.cContinuum),
  prediction("prediction",this,other.prediction)
{
} 


Double_t RooZExtPdf::evaluate() const 
{ 
	// ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
	
	
	// continuum component -- normalize to 20-oo
	Double_t continuum = fabs(cContinuum)/TMath::Exp(cContinuum*20.0) * TMath::Exp(cContinuum*inv);
	
	// renormalize prediction to 20-70 GeV region
	Double_t predictionRescaled = prediction*TMath::Exp(cContinuum*20.0)/
		(TMath::Exp(cContinuum*20.0) - TMath::Exp(cContinuum*70.0));
	
	// put both components together
	Double_t value = predictionRescaled*continuum;

	if (value >= 0)
		return value;
	else
		return 0.;
}


