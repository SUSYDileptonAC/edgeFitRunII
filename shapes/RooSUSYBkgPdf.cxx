 /***************************************************************************** 
  * Project: RooFit                                                           * 
  *                                                                           * 
  * This code was autogenerated by RooClassFactory                            * 
  *****************************************************************************/ 

 // Your description goes here... 

 #include "Riostream.h" 

 #include "RooSUSYBkgPdf.h" 
 #include "RooAbsReal.h" 
 #include "RooAbsCategory.h"
 #include "TMath.h"

 ClassImp(RooSUSYBkgPdf) 

 RooSUSYBkgPdf::RooSUSYBkgPdf(const char *name, const char *title, 
                        RooAbsReal& _inv,
                        RooAbsReal& _a1,
                        RooAbsReal& _a2,
                        RooAbsReal& _b1,
                        //~ RooAbsReal& _b2,
                        //~ RooAbsReal& _c1,
                        //~ RooAbsReal& _c2) :
                        RooAbsReal& _b2) :
   RooAbsPdf(name,title), 
   inv("inv","inv",this,_inv),
   a1("a1","a1",this,_a1),
   a2("a2","a2",this,_a2),
   b1("b1","b1",this,_b1),
   b2("b2","b2",this,_b2)
   //~ c1("c1","c1",this,_c1),
   //~ c2("c2","c2",this,_c2)
 { 
 } 


 RooSUSYBkgPdf::RooSUSYBkgPdf(const RooSUSYBkgPdf& other, const char* name) :  
   RooAbsPdf(other,name), 
   inv("inv",this,other.inv),
   a1("a1",this,other.a1),
   a2("a2",this,other.a2),
   b1("b1",this,other.b1),
   b2("b2",this,other.b2)
   //~ c1("c1",this,other.c1),
   //~ c2("c2",this,other.c2)
 { 
 } 



 Double_t RooSUSYBkgPdf::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   //~ return TMath::Power((inv+c2),a1)*TMath::Exp(-b1*TMath::Max((inv+c1),0.));//+TMath::Power(inv,a2)*TMath::Exp(-b2*inv); 
   //~ return TMath::Power((inv+c2),a1+a2*inv)*TMath::Exp(-b1*(inv+c1));//+TMath::Power(inv,a2)*TMath::Exp(-b2*inv); 
   return TMath::Power(inv,a1)*TMath::Exp(-b1*inv);//+TMath::Power(inv,a2)*TMath::Exp(-b2*inv); 
   //~ return TMath::Power(inv,a1)*TMath::Exp(-b1*inv)+TMath::Gaus((inv - a2), a2, b2); 
 } 



